diff -Nurd -x'*~' qtwebengine-opensource-src-5.7.1.orig/mkspecs/features/default_pre.prf qtwebengine-opensource-src-5.7.1/mkspecs/features/default_pre.prf
--- qtwebengine-opensource-src-5.7.1.orig/mkspecs/features/default_pre.prf	2016-11-30 23:08:16.000000000 -0500
+++ qtwebengine-opensource-src-5.7.1/mkspecs/features/default_pre.prf	2019-11-17 12:48:52.000000000 -0500
@@ -2,7 +2,7 @@
 QTWEBENGINE_ROOT = $$replace(PWD, /tools/qmake/mkspecs/features$,)
 
 # We depend on libc++ to build chromium so our macosx-version-min has to be 10.7
-QMAKE_MACOSX_DEPLOYMENT_TARGET = 10.7
+QMAKE_MACOSX_DEPLOYMENT_TARGET = @MACOSX_DEPLOYMENT_TARGET@
 
 QTWEBENGINEPROCESS_NAME_RELEASE = QtWebEngineProcess
 debug_and_release {
diff -Nurd -x'*~' qtwebengine-opensource-src-5.7.1.orig/mkspecs/features/functions.prf qtwebengine-opensource-src-5.7.1/mkspecs/features/functions.prf
--- qtwebengine-opensource-src-5.7.1.orig/mkspecs/features/functions.prf	2016-11-30 23:08:16.000000000 -0500
+++ qtwebengine-opensource-src-5.7.1/mkspecs/features/functions.prf	2019-11-17 12:55:27.000000000 -0500
@@ -23,7 +23,7 @@
       skipBuild("Qt WebEngine on Windows must be built on a 64-bit machine.")
     }
   } else:osx {
-    lessThan(QMAKE_XCODE_VERSION, 6.1) {
+    !isMinXcodeVersion(6, 1) {
       skipBuild("Using XCode version $$QMAKE_XCODE_VERSION, but at least version 6.1 is required to build Qt WebEngine.")
       return(false)
     }
@@ -134,6 +134,26 @@
     return(false)
 }
 
+defineTest(isMinXcodeVersion) {
+    requested_major = $$1
+    requested_minor = $$2
+    requested_patch = $$3
+    isEmpty(requested_minor): requested_minor = 0
+    isEmpty(requested_patch): requested_patch = 0
+    target_var = QMAKE_XCODE_VERSION
+    major_version = $$section($$target_var, ., 0, 0)
+    minor_version = $$section($$target_var, ., 1, 1)
+    patch_version = $$section($$target_var, ., 2, 2)
+    isEmpty(minor_version): minor_version = 0
+    isEmpty(patch_version): patch_version = 0
+
+    greaterThan(major_version, $$requested_major):return(true)
+    equals(major_version, $$requested_major):greaterThan(minor_version, $$requested_minor):return(true)
+    equals(major_version, $$requested_major):equals(minor_version, $$requested_minor):!lessThan(patch_version, $$requested_patch):return(true)
+
+    return(false)
+}
+
 # Map to the correct target type for gyp
 defineReplace(toGypTargetType) {
   equals(TEMPLATE, "app"):return("executable")
