diff -ru Python-3.6.1.orig/Lib/ctypes/macholib/dyld.py Python-3.6.1/Lib/ctypes/macholib/dyld.py
--- Python-3.6.1.orig/Lib/ctypes/macholib/dyld.py	2017-03-21 02:32:38.000000000 -0400
+++ Python-3.6.1/Lib/ctypes/macholib/dyld.py	2017-04-29 11:40:25.000000000 -0400
@@ -23,6 +23,7 @@
 
 DEFAULT_LIBRARY_FALLBACK = [
     os.path.expanduser("~/lib"),
+    "@PREFIX@/lib",
     "/usr/local/lib",
     "/lib",
     "/usr/lib",
diff -ru Python-3.6.1.orig/Lib/sysconfig.py Python-3.6.1/Lib/sysconfig.py
--- Python-3.6.1.orig/Lib/sysconfig.py	2017-03-21 02:32:38.000000000 -0400
+++ Python-3.6.1/Lib/sysconfig.py	2017-04-29 11:40:11.000000000 -0400
@@ -374,11 +374,6 @@
         if hasattr(e, "strerror"):
             msg = msg + " (%s)" % e.strerror
         raise OSError(msg)
-    # On AIX, there are wrong paths to the linker scripts in the Makefile
-    # -- these paths are relative to the Python source, but when installed
-    # the scripts are in another directory.
-    if _PYTHON_BUILD:
-        vars['BLDSHARED'] = vars['LDSHARED']
 
     # There's a chicken-and-egg situation on OS X with regards to the
     # _sysconfigdata module after the changes introduced by #15298:
diff -ru Python-3.6.1.orig/Makefile.pre.in Python-3.6.1/Makefile.pre.in
--- Python-3.6.1.orig/Makefile.pre.in	2017-03-21 02:32:38.000000000 -0400
+++ Python-3.6.1/Makefile.pre.in	2017-04-29 11:40:11.000000000 -0400
@@ -633,8 +633,7 @@
 	$(BLDSHARED) $(NO_AS_NEEDED) -o $@ -Wl,-h$@ $^
 
 libpython$(LDVERSION).dylib: $(LIBRARY_OBJS)
-	 $(CC) -dynamiclib -Wl,-single_module $(PY_LDFLAGS) -undefined dynamic_lookup -Wl,-install_name,$(prefix)/lib/libpython$(LDVERSION).dylib -Wl,-compatibility_version,$(VERSION) -Wl,-current_version,$(VERSION) -o $@ $(LIBRARY_OBJS) $(SHLIBS) $(LIBC) $(LIBM) $(LDLAST); \
-
+	 $(CC) -dynamiclib -Wl,-single_module $(LDFLAGS) @LIBTOOL_CRUFT@ -o $@ $(LIBRARY_OBJS) $(SHLIBS) $(LIBC) $(LDLAST)
 
 libpython$(VERSION).sl: $(LIBRARY_OBJS)
 	$(LDSHARED) -o $@ $(LIBRARY_OBJS) $(MODLIBS) $(SHLIBS) $(LIBC) $(LIBM) $(LDLAST)
@@ -1095,7 +1094,7 @@
 # Install the interpreter with $(VERSION) affixed
 # This goes into $(exec_prefix)
 altbininstall: $(BUILDPYTHON) @FRAMEWORKPYTHONW@
-	@for i in $(BINDIR) $(LIBDIR); \
+	@for i in $(BINDIR) $(LIBDIR) $(LIBPL); \
 	do \
 		if test ! -d $(DESTDIR)$$i; then \
 			echo "Creating directory $$i"; \
@@ -1112,19 +1111,19 @@
 		if test -f $(DESTDIR)$(BINDIR)/python$(VERSION)$(EXE) -o -h $(DESTDIR)$(BINDIR)/python$(VERSION)$(EXE); \
 		then rm -f $(DESTDIR)$(BINDIR)/python$(VERSION)$(EXE); \
 		fi; \
-		(cd $(DESTDIR)$(BINDIR); $(LN) python$(LDVERSION)$(EXE) python$(VERSION)$(EXE)); \
+		(cd $(DESTDIR)$(BINDIR); $(LN) -s python$(LDVERSION)$(EXE) python$(VERSION)$(EXE)); \
 	fi
 	if test -f $(LDLIBRARY) && test "$(PYTHONFRAMEWORKDIR)" = "no-framework" ; then \
 		if test -n "$(DLLLIBRARY)" ; then \
 			$(INSTALL_SHARED) $(DLLLIBRARY) $(DESTDIR)$(BINDIR); \
 		else \
-			$(INSTALL_SHARED) $(LDLIBRARY) $(DESTDIR)$(LIBDIR)/$(INSTSONAME); \
+			$(INSTALL_SHARED) $(LDLIBRARY) $(DESTDIR)$(LIBPL)/$(INSTSONAME); \
 			if test $(LDLIBRARY) != $(INSTSONAME); then \
-				(cd $(DESTDIR)$(LIBDIR); $(LN) -sf $(INSTSONAME) $(LDLIBRARY)) \
+				(cd $(DESTDIR)$(LIBPL); $(LN) -sf $(INSTSONAME) $(LDLIBRARY)) \
 			fi \
 		fi; \
 		if test -n "$(PY3LIBRARY)"; then \
-			$(INSTALL_SHARED) $(PY3LIBRARY) $(DESTDIR)$(LIBDIR)/$(PY3LIBRARY); \
+			$(INSTALL_SHARED) $(PY3LIBRARY) $(DESTDIR)$(LIBPL)/$(PY3LIBRARY); \
 		fi; \
 	else	true; \
 	fi
diff -ru Python-3.6.1.orig/Misc/python-config.in Python-3.6.1/Misc/python-config.in
--- Python-3.6.1.orig/Misc/python-config.in	2017-03-21 02:32:38.000000000 -0400
+++ Python-3.6.1/Misc/python-config.in	2017-04-29 11:40:11.000000000 -0400
@@ -50,13 +50,10 @@
         libs = ['-lpython' + pyver + sys.abiflags]
         libs += getvar('LIBS').split()
         libs += getvar('SYSLIBS').split()
-        # add the prefix/lib/pythonX.Y/config dir, but only if there is no
-        # shared library in prefix/lib/.
+        # add the prefix/lib/pythonX.Y/config dir (fink keeps shared
+        # library there too)
         if opt == '--ldflags':
-            if not getvar('Py_ENABLE_SHARED'):
-                libs.insert(0, '-L' + getvar('LIBPL'))
-            if not getvar('PYTHONFRAMEWORK'):
-                libs.extend(getvar('LINKFORSHARED').split())
+            libs.insert(0, '-L' + getvar('LIBPL'))
         print(' '.join(libs))
 
     elif opt == '--extension-suffix':
diff -ru Python-3.6.1.orig/Misc/python.pc.in Python-3.6.1/Misc/python.pc.in
--- Python-3.6.1.orig/Misc/python.pc.in	2017-03-21 02:32:38.000000000 -0400
+++ Python-3.6.1/Misc/python.pc.in	2017-04-29 11:40:11.000000000 -0400
@@ -1,7 +1,7 @@
 # See: man pkg-config
 prefix=@prefix@
 exec_prefix=@exec_prefix@
-libdir=@libdir@
+libdir=@libdir@/python@VERSION@/config-@VERSION@@ABIFLAGS@-darwin
 includedir=@includedir@
 
 Name: Python
diff -ru Python-3.6.1.orig/Modules/_dbmmodule.c Python-3.6.1/Modules/_dbmmodule.c
--- Python-3.6.1.orig/Modules/_dbmmodule.c	2017-03-21 02:32:38.000000000 -0400
+++ Python-3.6.1/Modules/_dbmmodule.c	2017-04-29 11:40:11.000000000 -0400
@@ -16,7 +16,7 @@
 #include <ndbm.h>
 static const char which_dbm[] = "GNU gdbm";  /* EMX port of GDBM */
 #elif defined(HAVE_GDBM_NDBM_H)
-#include <gdbm/ndbm.h>
+#include <ndbm.h>
 static const char which_dbm[] = "GNU gdbm";
 #elif defined(HAVE_GDBM_DASH_NDBM_H)
 #include <gdbm-ndbm.h>
diff -ru Python-3.6.1.orig/configure Python-3.6.1/configure
--- Python-3.6.1.orig/configure	2017-03-21 02:32:38.000000000 -0400
+++ Python-3.6.1/configure	2017-04-29 11:40:11.000000000 -0400
@@ -5993,7 +5993,7 @@
 	  ;;
     Darwin*)
     	LDLIBRARY='libpython$(LDVERSION).dylib'
-	BLDLIBRARY='-L. -lpython$(LDVERSION)'
+	BLDLIBRARY="`pwd`/$LDLIBRARY"
 	RUNSHARED=DYLD_LIBRARY_PATH=`pwd`${DYLD_LIBRARY_PATH:+:${DYLD_LIBRARY_PATH}}
 	;;
     AIX*)
@@ -9067,8 +9067,8 @@
 
     fi
 
-    LIBTOOL_CRUFT=$LIBTOOL_CRUFT" -lSystem -lSystemStubs -arch_only ${MACOSX_DEFAULT_ARCH}"
-    LIBTOOL_CRUFT=$LIBTOOL_CRUFT' -install_name $(PYTHONFRAMEWORKINSTALLDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'
+    LIBTOOL_CRUFT=$LIBTOOL_CRUFT" -lSystem -lSystemStubs"
+    LIBTOOL_CRUFT=$LIBTOOL_CRUFT' -install_name $(BINLIBDEST)/config-$(LDVERSION)-darwin/$(INSTSONAME)'
     LIBTOOL_CRUFT=$LIBTOOL_CRUFT' -compatibility_version $(VERSION) -current_version $(VERSION)';;
 esac
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for --enable-framework" >&5
@@ -9219,9 +9219,9 @@
 			fi
 		else
 			# building for OS X 10.3 and later
-			LDSHARED='$(CC) -bundle -undefined dynamic_lookup'
-			LDCXXSHARED='$(CXX) -bundle -undefined dynamic_lookup'
-			BLDSHARED="$LDSHARED"
+			LDSHARED='$(CC) -bundle ''-L$(BINLIBDEST)/config-$(LDVERSION)-darwin -lpython$(LDVERSION)'
+			LDCXXSHARED='$(CXX) -bundle ''-L$(BINLIBDEST)/config-$(LDVERSION)-darwin -lpython$(LDVERSION)'
+			BLDSHARED='$(CC) -bundle ''$(BLDLIBRARY)'
 		fi
 		;;
 	Linux*|GNU*|QNX*)
@@ -15780,7 +15780,7 @@
 # first curses header check
 ac_save_cppflags="$CPPFLAGS"
 if test "$cross_compiling" = no; then
-  CPPFLAGS="$CPPFLAGS -I/usr/include/ncursesw"
+  CPPFLAGS="$CPPFLAGS -I@PREFIX@/include/ncursesw"
 fi
 
 for ac_header in curses.h ncurses.h
@@ -16043,7 +16043,7 @@
 
 if test $ac_sys_system = Darwin
 then
-	LIBS="$LIBS -framework CoreFoundation"
+	LIBS="$LIBS -Wl,-framework,CoreFoundation"
 fi
 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for %zd printf() format support" >&5
diff -ru Python-3.6.1.orig/setup.py Python-3.6.1/setup.py
--- Python-3.6.1.orig/setup.py	2017-03-21 02:32:38.000000000 -0400
+++ Python-3.6.1/setup.py	2017-04-29 11:40:11.000000000 -0400
@@ -286,6 +286,7 @@
                                               longest, g))
 
         if missing:
+            num_missing=len(missing)
             print()
             print("Python build finished successfully!")
             print("The necessary bits to build these optional modules were not "
@@ -293,7 +294,10 @@
             print_three_column(missing)
             print("To find the necessary bits, look in setup.py in"
                   " detect_modules() for the module's name.")
+            print ("(Fink package build should have 2 missing)")
             print()
+            if num_missing != 2:
+                sys.exit(1)
 
         if removed_modules:
             print("The following modules found by detect_modules() in"
@@ -316,6 +320,7 @@
                   " but were removed because they could not be imported:")
             print_three_column(failed)
             print()
+            sys.exit(1)
 
     def build_extension(self, ext):
 
@@ -491,8 +496,8 @@
         # directories (i.e. '.' and 'Include') must be first.  See issue
         # 10520.
         if not cross_compiling:
-            add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
-            add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
+            add_dir_to_list(self.compiler.library_dirs, '@PREFIX@/lib')
+            add_dir_to_list(self.compiler.include_dirs, '@PREFIX@/include')
         # only change this for cross builds for 3.3, issues on Mageia
         if cross_compiling:
             self.add_gcc_paths()
@@ -1128,13 +1133,8 @@
         # We hunt for #define SQLITE_VERSION "n.n.n"
         # We need to find >= sqlite version 3.0.8
         sqlite_incdir = sqlite_libdir = None
-        sqlite_inc_paths = [ '/usr/include',
-                             '/usr/include/sqlite',
-                             '/usr/include/sqlite3',
-                             '/usr/local/include',
-                             '/usr/local/include/sqlite',
-                             '/usr/local/include/sqlite3',
-                             ]
+        sqlite_inc_paths = [ '@PREFIX@/include'
+                           ]
         if cross_compiling:
             sqlite_inc_paths = []
         MIN_SQLITE_VERSION_NUMBER = (3, 0, 8)
@@ -1147,7 +1147,7 @@
         if host_platform == 'darwin':
             sysroot = macosx_sdk_root()
 
-        for d_ in inc_dirs + sqlite_inc_paths:
+        for d_ in sqlite_inc_paths:
             d = d_
             if host_platform == 'darwin' and is_macosx_sdk_path(d):
                 d = os.path.join(sysroot, d[1:])
@@ -1180,11 +1180,9 @@
             sqlite_dirs_to_check = [
                 os.path.join(sqlite_incdir, '..', 'lib64'),
                 os.path.join(sqlite_incdir, '..', 'lib'),
-                os.path.join(sqlite_incdir, '..', '..', 'lib64'),
-                os.path.join(sqlite_incdir, '..', '..', 'lib'),
             ]
             sqlite_libfile = self.compiler.find_library_file(
-                                sqlite_dirs_to_check + lib_dirs, 'sqlite3')
+                                sqlite_dirs_to_check, 'sqlite3')
             if sqlite_libfile:
                 sqlite_libdir = [os.path.abspath(os.path.dirname(sqlite_libfile))]
 
@@ -1278,7 +1276,7 @@
                         if self.compiler.find_library_file(lib_dirs,
                                                                'gdbm_compat'):
                             gdbm_libs.append('gdbm_compat')
-                        if find_file("gdbm/ndbm.h", inc_dirs, []) is not None:
+                        if find_file("ndbm.h", inc_dirs, []) is not None:
                             if dbm_setup_debug: print("building dbm using gdbm")
                             dbmext = Extension(
                                 '_dbm', ['_dbmmodule.c'],
@@ -1351,7 +1349,7 @@
         if curses_library == 'ncursesw':
             curses_defines.append(('HAVE_NCURSESW', '1'))
             if not cross_compiling:
-                curses_includes.append('/usr/include/ncursesw')
+                curses_includes.append('@PREFIX@/include/ncursesw')
             # Bug 1464056: If _curses.so links with ncursesw,
             # _curses_panel.so must link with panelw.
             panel_library = 'panelw'
diff --git a/Lib/test/test_uuid.py b/Lib/test/test_uuid.py
index 4373fba12ac8..aa3de74cef0a 100644
--- a/Lib/test/test_uuid.py
+++ b/Lib/test/test_uuid.py
@@ -304,6 +304,32 @@ def test_getnode(self):
         node2 = uuid.getnode()
         self.assertEqual(node1, node2, '%012x != %012x' % (node1, node2))
 
+    # bpo-32502: UUID1 requires a 48-bit identifier, but hardware identifiers
+    # need not necessarily be 48 bits (e.g., EUI-64).
+    def test_uuid1_eui64(self):
+        # Confirm that uuid.getnode ignores hardware addresses larger than 48
+        # bits. Mock out each platform's *_getnode helper functions to return
+        # something just larger than 48 bits to test. This will cause
+        # uuid.getnode to fall back on uuid._random_getnode, which will
+        # generate a valid value.
+        too_large_getter = lambda: 1 << 48
+        with unittest.mock.patch.multiple(
+            uuid,
+            _node=None,  # Ignore any cached node value.
+            _NODE_GETTERS_WIN32=[too_large_getter],
+            _NODE_GETTERS_UNIX=[too_large_getter],
+        ):
+            node = uuid.getnode()
+        self.assertTrue(0 < node < (1 << 48), '%012x' % node)
+
+        # Confirm that uuid1 can use the generated node, i.e., the that
+        # uuid.getnode fell back on uuid._random_getnode() rather than using
+        # the value from too_large_getter above.
+        try:
+            uuid.uuid1(node=node)
+        except ValueError as e:
+            self.fail('uuid1 was given an invalid node ID')
+
     @unittest.skipUnless(importable('ctypes'), 'requires ctypes')
     def test_uuid1(self):
         equal = self.assertEqual
diff --git a/Lib/uuid.py b/Lib/uuid.py
index 36c956e2b0fd..3cd67fcfd093 100644
--- a/Lib/uuid.py
+++ b/Lib/uuid.py
@@ -540,6 +540,11 @@ def _random_getnode():
 
 _node = None
 
+_NODE_GETTERS_WIN32 = [_windll_getnode, _netbios_getnode, _ipconfig_getnode]
+
+_NODE_GETTERS_UNIX = [_unixdll_getnode, _ifconfig_getnode, _ip_getnode,
+                      _arp_getnode, _lanscan_getnode, _netstat_getnode]
+
 def getnode():
     """Get the hardware address as a 48-bit positive integer.
 
@@ -555,18 +560,18 @@ def getnode():
 
     import sys
     if sys.platform == 'win32':
-        getters = [_windll_getnode, _netbios_getnode, _ipconfig_getnode]
+        getters = _NODE_GETTERS_WIN32
     else:
-        getters = [_unixdll_getnode, _ifconfig_getnode, _ip_getnode,
-                   _arp_getnode, _lanscan_getnode, _netstat_getnode]
+        getters = _NODE_GETTERS_UNIX
 
     for getter in getters + [_random_getnode]:
         try:
             _node = getter()
         except:
             continue
-        if _node is not None:
+        if (_node is not None) and (0 <= _node < (1 << 48)):
             return _node
+    assert False, '_random_getnode() returned invalid value: {}'.format(_node)
 
 _last_timestamp = None
 
diff --git a/Misc/NEWS.d/next/Library/2018-01-20-17-15-34.bpo-32502.OXJfn7.rst b/Misc/NEWS.d/next/Library/2018-01-20-17-15-34.bpo-32502.OXJfn7.rst
new file mode 100644
index 000000000000..8338632aa2c5
--- /dev/null
+++ b/Misc/NEWS.d/next/Library/2018-01-20-17-15-34.bpo-32502.OXJfn7.rst
@@ -0,0 +1,2 @@
+uuid.uuid1 no longer raises an exception if a 64-bit hardware address is
+encountered.
diff --git a/Lib/test/test_capi.py b/Lib/test/test_capi.py
index 848a5289bab7..b36a2ce585ce 100644
--- a/Lib/test/test_capi.py
+++ b/Lib/test/test_capi.py
@@ -494,16 +494,6 @@ def test_pre_initialization_api(self):
         self.assertEqual(out, '')
         self.assertEqual(err, '')
 
-    def test_bpo20891(self):
-        """
-        bpo-20891: Calling PyGILState_Ensure in a non-Python thread before
-        calling PyEval_InitThreads() must not crash. PyGILState_Ensure() must
-        call PyEval_InitThreads() for us in this case.
-        """
-        out, err = self.run_embedded_interpreter("bpo20891")
-        self.assertEqual(out, '')
-        self.assertEqual(err, '')
-
 
 class SkipitemTest(unittest.TestCase):
 
diff --git a/Programs/_testembed.c b/Programs/_testembed.c
index b0f9087115b9..813cf307bda2 100644
--- a/Programs/_testembed.c
+++ b/Programs/_testembed.c
@@ -149,53 +149,6 @@ static int test_pre_initialization_api(void)
     return 0;
 }
 
-static void bpo20891_thread(void *lockp)
-{
-    PyThread_type_lock lock = *((PyThread_type_lock*)lockp);
-
-    PyGILState_STATE state = PyGILState_Ensure();
-    if (!PyGILState_Check()) {
-        fprintf(stderr, "PyGILState_Check failed!");
-        abort();
-    }
-
-    PyGILState_Release(state);
-
-    PyThread_release_lock(lock);
-
-    PyThread_exit_thread();
-}
-
-static int test_bpo20891(void)
-{
-    /* bpo-20891: Calling PyGILState_Ensure in a non-Python thread before
-       calling PyEval_InitThreads() must not crash. PyGILState_Ensure() must
-       call PyEval_InitThreads() for us in this case. */
-    PyThread_type_lock lock = PyThread_allocate_lock();
-    if (!lock) {
-        fprintf(stderr, "PyThread_allocate_lock failed!");
-        return 1;
-    }
-
-    _testembed_Py_Initialize();
-
-    long thrd = PyThread_start_new_thread(bpo20891_thread, &lock);
-    if (thrd == -1) {
-        fprintf(stderr, "PyThread_start_new_thread failed!");
-        return 1;
-    }
-    PyThread_acquire_lock(lock, WAIT_LOCK);
-
-    Py_BEGIN_ALLOW_THREADS
-    /* wait until the thread exit */
-    PyThread_acquire_lock(lock, WAIT_LOCK);
-    Py_END_ALLOW_THREADS
-
-    PyThread_free_lock(lock);
-
-    return 0;
-}
-
 
 /* *********************************************************
  * List of test cases and the function that implements it.
@@ -219,7 +172,6 @@ static struct TestCase TestCases[] = {
     { "forced_io_encoding", test_forced_io_encoding },
     { "repeated_init_and_subinterpreters", test_repeated_init_and_subinterpreters },
     { "pre_initialization_api", test_pre_initialization_api },
-    { "bpo20891", test_bpo20891 },
     { NULL, NULL }
 };
