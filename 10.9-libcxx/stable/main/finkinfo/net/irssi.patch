diff -Nurd irssi-1.2.2.orig/configure irssi-1.2.2/configure
--- irssi-1.2.2.orig/configure	2019-08-29 09:49:02.000000000 -0400
+++ irssi-1.2.2/configure	2020-08-16 15:15:34.000000000 -0400
@@ -13434,7 +13434,7 @@
     PKG_CONFIG=no
   fi
 
-  min_glib_version=2.28.0
+  min_glib_version=2.22.0
   { $as_echo "$as_me:${as_lineno-$LINENO}: checking for GLIB - version >= $min_glib_version" >&5
 $as_echo_n "checking for GLIB - version >= $min_glib_version... " >&6; }
 
diff -Nurd irssi-1.2.2.orig/src/README-glib irssi-1.2.2/src/README-glib
--- irssi-1.2.2.orig/src/README-glib	1969-12-31 19:00:00.000000000 -0500
+++ irssi-1.2.2/src/README-glib	2020-08-16 23:13:30.000000000 -0400
@@ -0,0 +1,14 @@
+glib-glist-shims.c:
+
+	* copied g_list_free_full() from glib-2.64.4/glib/glist.c
+
+glib-gsequence-shims.c:
+
+	* copied g_sequence_lookup(), g_sequence_lookup_iter(), and
+          their helper functions and new structs from
+          glib-2.64.4/glib/gsequence.c
+
+glib-gslist-shims.c:
+
+	* copied g_slist_free_full() glib-2.64.4/glib/gslist.c
+
diff -Nurd irssi-1.2.2.orig/src/fe-common/core/command-history.c irssi-1.2.2/src/fe-common/core/command-history.c
--- irssi-1.2.2.orig/src/fe-common/core/command-history.c	2019-08-29 09:48:46.000000000 -0400
+++ irssi-1.2.2/src/fe-common/core/command-history.c	2020-08-16 19:36:52.000000000 -0400
@@ -29,6 +29,8 @@
 
 #include "command-history.h"
 
+#include "glib-glist-shims.c"
+
 /* command history */
 static GList *history_entries;
 static HISTORY_REC *global_history;
diff -Nurd irssi-1.2.2.orig/src/fe-common/core/fe-windows.c irssi-1.2.2/src/fe-common/core/fe-windows.c
--- irssi-1.2.2.orig/src/fe-common/core/fe-windows.c	2019-08-29 09:48:46.000000000 -0400
+++ irssi-1.2.2/src/fe-common/core/fe-windows.c	2020-08-16 19:37:17.000000000 -0400
@@ -33,6 +33,8 @@
 #include "fe-windows.h"
 #include "window-items.h"
 
+#include "glib-gsequence-shims.c"
+
 GSList *windows; /* first in the list is the active window,
                     next is the last active, etc. */
 GSequence *windows_seq;
diff -Nurd irssi-1.2.2.orig/src/glib-glist-shims.c irssi-1.2.2/src/glib-glist-shims.c
--- irssi-1.2.2.orig/src/glib-glist-shims.c	1969-12-31 19:00:00.000000000 -0500
+++ irssi-1.2.2/src/glib-glist-shims.c	2020-08-16 18:41:17.000000000 -0400
@@ -0,0 +1,55 @@
+/* GLIB - Library of useful routines for C programming
+ * Copyright (C) 1995-1997  Peter Mattis, Spencer Kimball and Josh MacDonald
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+/*
+ * Modified by the GLib Team and others 1997-2000.  See the AUTHORS
+ * file for a list of people on the GLib Team.  See the ChangeLog
+ * files for a list of changes.  These files are distributed with
+ * GLib at ftp://ftp.gtk.org/pub/gtk/.
+ */
+
+#include <glib.h>
+
+/**
+ * g_list_free_full:
+ * @list: a pointer to a #GList
+ * @free_func: the function to be called to free each element's data
+ *
+ * Convenience method, which frees all the memory used by a #GList,
+ * and calls @free_func on every element's data.
+ *
+ * @free_func must not modify the list (eg, by removing the freed
+ * element from it).
+ *
+ * It can be combined with g_steal_pointer() to ensure the list head pointer
+ * is not left dangling ­— this also has the nice property that the head pointer
+ * is cleared before any of the list elements are freed, to prevent double frees
+ * from @free_func:
+ * |[<!-- language="C" -->
+ * GList *list_of_owned_things = …;  /<!-- -->* (transfer full) (element-type GObject) *<!-- -->/
+ * g_list_free_full (g_steal_pointer (&list_of_owned_things), g_object_unref);
+ * ]|
+ *
+ * Since: 2.28
+ */
+void
+g_list_free_full (GList          *list,
+                  GDestroyNotify  free_func)
+{
+  g_list_foreach (list, (GFunc) free_func, NULL);
+  g_list_free (list);
+}
diff -Nurd irssi-1.2.2.orig/src/glib-gsequence-shims.c irssi-1.2.2/src/glib-gsequence-shims.c
--- irssi-1.2.2.orig/src/glib-gsequence-shims.c	1969-12-31 19:00:00.000000000 -0500
+++ irssi-1.2.2/src/glib-gsequence-shims.c	2020-08-16 19:38:07.000000000 -0400
@@ -0,0 +1,365 @@
+/* GLIB - Library of useful routines for C programming
+ * Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007
+ * Soeren Sandmann (sandmann@daimi.au.dk)
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+/* fink: using public parts not whole local unit */
+
+#include <glib.h>
+
+/* from gsequence.h */
+
+GSequenceIter *g_sequence_lookup             (GSequence                *seq,
+                                              gpointer                  data,
+                                              GCompareDataFunc          cmp_func,
+                                              gpointer                  cmp_data);
+GSequenceIter *g_sequence_lookup_iter        (GSequence                *seq,
+                                              gpointer                  data,
+                                              GSequenceIterCompareFunc  iter_cmp,
+                                              gpointer                  cmp_data);
+
+
+/* from gsequence.c */
+
+/**
+ * SECTION:sequence
+ * @title: Sequences
+ * @short_description: scalable lists
+ *
+ * The #GSequence data structure has the API of a list, but is
+ * implemented internally with a balanced binary tree. This means that
+ * it is possible to maintain a sorted list of n elements in time O(n log n).
+ * The data contained in each element can be either integer values, by using
+ * of the [Type Conversion Macros][glib-Type-Conversion-Macros], or simply
+ * pointers to any type of data.
+ *
+ * A #GSequence is accessed through "iterators", represented by a
+ * #GSequenceIter. An iterator represents a position between two
+ * elements of the sequence. For example, the "begin" iterator
+ * represents the gap immediately before the first element of the
+ * sequence, and the "end" iterator represents the gap immediately
+ * after the last element. In an empty sequence, the begin and end
+ * iterators are the same.
+ *
+ * Some methods on #GSequence operate on ranges of items. For example
+ * g_sequence_foreach_range() will call a user-specified function on
+ * each element with the given range. The range is delimited by the
+ * gaps represented by the passed-in iterators, so if you pass in the
+ * begin and end iterators, the range in question is the entire
+ * sequence.
+ *
+ * The function g_sequence_get() is used with an iterator to access the
+ * element immediately following the gap that the iterator represents.
+ * The iterator is said to "point" to that element.
+ *
+ * Iterators are stable across most operations on a #GSequence. For
+ * example an iterator pointing to some element of a sequence will
+ * continue to point to that element even after the sequence is sorted.
+ * Even moving an element to another sequence using for example
+ * g_sequence_move_range() will not invalidate the iterators pointing
+ * to it. The only operation that will invalidate an iterator is when
+ * the element it points to is removed from any sequence.
+ *
+ * To sort the data, either use g_sequence_insert_sorted() or
+ * g_sequence_insert_sorted_iter() to add data to the #GSequence or, if
+ * you want to add a large amount of data, it is more efficient to call
+ * g_sequence_sort() or g_sequence_sort_iter() after doing unsorted
+ * insertions.
+ */
+
+/**
+ * GSequenceIter:
+ *
+ * The #GSequenceIter struct is an opaque data type representing an
+ * iterator pointing into a #GSequence.
+ */
+
+/**
+ * GSequenceIterCompareFunc:
+ * @a: a #GSequenceIter
+ * @b: a #GSequenceIter
+ * @data: user data
+ *
+ * A #GSequenceIterCompareFunc is a function used to compare iterators.
+ * It must return zero if the iterators compare equal, a negative value
+ * if @a comes before @b, and a positive value if @b comes before @a.
+ *
+ * Returns: zero if the iterators are equal, a negative value if @a
+ *     comes before @b, and a positive value if @b comes before @a.
+ */
+
+typedef struct _GSequenceNode GSequenceNode;
+
+/**
+ * GSequence:
+ *
+ * The #GSequence struct is an opaque data type representing a
+ * [sequence][glib-Sequences] data type.
+ */
+struct _GSequence
+{
+  GSequenceNode *       end_node;
+  GDestroyNotify        data_destroy_notify;
+  gboolean              access_prohibited;
+
+  /* The 'real_sequence' is used when temporary sequences are created
+   * to hold nodes that are being rearranged. The 'real_sequence' of such
+   * a temporary sequence points to the sequence that is actually being
+   * manipulated. The only reason we need this is so that when the
+   * sort/sort_changed/search_iter() functions call out to the application
+   * g_sequence_iter_get_sequence() will return the correct sequence.
+   */
+  GSequence *           real_sequence;
+};
+
+struct _GSequenceNode
+{
+  gint                  n_nodes;
+  GSequenceNode *       parent;
+  GSequenceNode *       left;
+  GSequenceNode *       right;
+  gpointer              data;   /* For the end node, this field points
+                                 * to the sequence
+                                 */
+};
+
+/*
+ * Declaration of GSequenceNode methods
+ */
+static GSequenceNode *node_find          (GSequenceNode            *haystack,
+                                          GSequenceNode            *needle,
+                                          GSequenceNode            *end,
+                                          GSequenceIterCompareFunc  cmp,
+                                          gpointer                  user_data);
+
+
+/*
+ * Various helper functions
+ */
+static void
+check_seq_access (GSequence *seq)
+{
+  if (G_UNLIKELY (seq->access_prohibited))
+    {
+      g_warning ("Accessing a sequence while it is "
+                 "being sorted or searched is not allowed");
+    }
+}
+
+typedef struct
+{
+  GCompareDataFunc  cmp_func;
+  gpointer          cmp_data;
+  GSequenceNode    *end_node;
+} SortInfo;
+
+/* This function compares two iters using a normal compare
+ * function and user_data passed in in a SortInfo struct
+ */
+static gint
+iter_compare (GSequenceIter *node1,
+              GSequenceIter *node2,
+              gpointer       data)
+{
+  const SortInfo *info = data;
+  gint retval;
+
+  if (node1 == info->end_node)
+    return 1;
+
+  if (node2 == info->end_node)
+    return -1;
+
+  retval = info->cmp_func (node1->data, node2->data, info->cmp_data);
+
+  return retval;
+}
+
+/*
+ * Public API
+ */
+
+/**
+ * g_sequence_lookup:
+ * @seq: a #GSequence
+ * @data: data to look up
+ * @cmp_func: the function used to compare items in the sequence
+ * @cmp_data: user data passed to @cmp_func
+ *
+ * Returns an iterator pointing to the position of the first item found
+ * equal to @data according to @cmp_func and @cmp_data. If more than one
+ * item is equal, it is not guaranteed that it is the first which is
+ * returned. In that case, you can use g_sequence_iter_next() and
+ * g_sequence_iter_prev() to get others.
+ *
+ * @cmp_func is called with two items of the @seq, and @cmp_data.
+ * It should return 0 if the items are equal, a negative value if
+ * the first item comes before the second, and a positive value if
+ * the second item comes before the first.
+ *
+ * This function will fail if the data contained in the sequence is
+ * unsorted.
+ *
+ * Returns: (transfer none) (nullable): an #GSequenceIter pointing to the position of the
+ *     first item found equal to @data according to @cmp_func and
+ *     @cmp_data, or %NULL if no such item exists
+ *
+ * Since: 2.28
+ */
+GSequenceIter *
+g_sequence_lookup (GSequence        *seq,
+                   gpointer          data,
+                   GCompareDataFunc  cmp_func,
+                   gpointer          cmp_data)
+{
+  SortInfo info;
+
+  g_return_val_if_fail (seq != NULL, NULL);
+
+  info.cmp_func = cmp_func;
+  info.cmp_data = cmp_data;
+  info.end_node = seq->end_node;
+  check_seq_access (seq);
+
+  return g_sequence_lookup_iter (seq, data, iter_compare, &info);
+}
+
+/**
+ * g_sequence_lookup_iter:
+ * @seq: a #GSequence
+ * @data: data to look up
+ * @iter_cmp: the function used to compare iterators in the sequence
+ * @cmp_data: user data passed to @iter_cmp
+ *
+ * Like g_sequence_lookup(), but uses a #GSequenceIterCompareFunc
+ * instead of a #GCompareDataFunc as the compare function.
+ *
+ * @iter_cmp is called with two iterators pointing into @seq.
+ * It should return 0 if the iterators are equal, a negative value
+ * if the first iterator comes before the second, and a positive
+ * value if the second iterator comes before the first.
+ *
+ * This function will fail if the data contained in the sequence is
+ * unsorted.
+ *
+ * Returns: (transfer none) (nullable): an #GSequenceIter pointing to the position of
+ *     the first item found equal to @data according to @iter_cmp
+ *     and @cmp_data, or %NULL if no such item exists
+ *
+ * Since: 2.28
+ */
+GSequenceIter *
+g_sequence_lookup_iter (GSequence                *seq,
+                        gpointer                  data,
+                        GSequenceIterCompareFunc  iter_cmp,
+                        gpointer                  cmp_data)
+{
+  GSequenceNode *node;
+  GSequenceNode *dummy;
+  GSequence *tmp_seq;
+
+  g_return_val_if_fail (seq != NULL, NULL);
+
+  check_seq_access (seq);
+
+  seq->access_prohibited = TRUE;
+
+  tmp_seq = g_sequence_new (NULL);
+  tmp_seq->real_sequence = seq;
+
+  dummy = g_sequence_append (tmp_seq, data);
+
+  node = node_find (seq->end_node, dummy,
+                    seq->end_node, iter_cmp, cmp_data);
+
+  g_sequence_free (tmp_seq);
+
+  seq->access_prohibited = FALSE;
+
+  return node;
+}
+
+/**
+ * g_sequence_is_empty:
+ * @seq: a #GSequence
+ *
+ * Returns %TRUE if the sequence contains zero items.
+ *
+ * This function is functionally identical to checking the result of
+ * g_sequence_get_length() being equal to zero. However this function is
+ * implemented in O(1) running time.
+ *
+ * Returns: %TRUE if the sequence is empty, otherwise %FALSE.
+ *
+ * Since: 2.48
+ */
+gboolean
+g_sequence_is_empty (GSequence *seq)
+{
+  return (seq->end_node->parent == NULL) && (seq->end_node->left == NULL);
+}
+
+/* GSequenceIter */
+
+
+/*
+ * Implementation of a treap
+ *
+ *
+ */
+
+static GSequenceNode *
+find_root (GSequenceNode *node)
+{
+  while (node->parent)
+    node = node->parent;
+
+  return node;
+}
+
+static GSequenceNode *
+node_find (GSequenceNode            *haystack,
+           GSequenceNode            *needle,
+           GSequenceNode            *end,
+           GSequenceIterCompareFunc  iter_cmp,
+           gpointer                  cmp_data)
+{
+  gint c;
+
+  haystack = find_root (haystack);
+
+  do
+    {
+      /* iter_cmp can't be passed the end node, since the function may
+       * be user-supplied
+       */
+      if (haystack == end)
+        c = 1;
+      else
+        c = iter_cmp (haystack, needle, cmp_data);
+
+      if (c == 0)
+        break;
+
+      if (c > 0)
+        haystack = haystack->left;
+      else
+        haystack = haystack->right;
+    }
+  while (haystack != NULL);
+
+  return haystack;
+}
diff -Nurd irssi-1.2.2.orig/src/glib-gslist-shims.c irssi-1.2.2/src/glib-gslist-shims.c
--- irssi-1.2.2.orig/src/glib-gslist-shims.c	1969-12-31 19:00:00.000000000 -0500
+++ irssi-1.2.2/src/glib-gslist-shims.c	2020-08-16 23:14:30.000000000 -0400
@@ -0,0 +1,59 @@
+/* GLIB - Library of useful routines for C programming
+ * Copyright (C) 1995-1997  Peter Mattis, Spencer Kimball and Josh MacDonald
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+/*
+ * Modified by the GLib Team and others 1997-2000.  See the AUTHORS
+ * file for a list of people on the GLib Team.  See the ChangeLog
+ * files for a list of changes.  These files are distributed with
+ * GLib at ftp://ftp.gtk.org/pub/gtk/.
+ */
+
+/*
+ * MT safe
+ */
+
+#include <glib.h>
+
+/**
+ * g_slist_free_full:
+ * @list: a pointer to a #GSList
+ * @free_func: the function to be called to free each element's data
+ *
+ * Convenience method, which frees all the memory used by a #GSList, and
+ * calls the specified destroy function on every element's data.
+ *
+ * @free_func must not modify the list (eg, by removing the freed
+ * element from it).
+ *
+ * It can be combined with g_steal_pointer() to ensure the list head pointer
+ * is not left dangling ­— this also has the nice property that the head pointer
+ * is cleared before any of the list elements are freed, to prevent double frees
+ * from @free_func:
+ * |[<!-- language="C" -->
+ * GSList *list_of_owned_things = …;  /<!-- -->* (transfer full) (element-type GObject) *<!-- -->/
+ * g_slist_free_full (g_steal_pointer (&list_of_owned_things), g_object_unref);
+ * ]|
+ *
+ * Since: 2.28
+ **/
+void
+g_slist_free_full (GSList         *list,
+		   GDestroyNotify  free_func)
+{
+  g_slist_foreach (list, (GFunc) free_func, NULL);
+  g_slist_free (list);
+}
diff -Nurd irssi-1.2.2.orig/src/perl/textui/TextUI.xs irssi-1.2.2/src/perl/textui/TextUI.xs
--- irssi-1.2.2.orig/src/perl/textui/TextUI.xs	2019-08-29 09:48:43.000000000 -0400
+++ irssi-1.2.2/src/perl/textui/TextUI.xs	2020-08-16 23:16:40.000000000 -0400
@@ -1,6 +1,8 @@
 #define PERL_NO_GET_CONTEXT
 #include "module.h"
 
+#include "glib-gslist-shims.c"
+
 void perl_statusbar_init(void);
 void perl_statusbar_deinit(void);
 
