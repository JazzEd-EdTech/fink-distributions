# -*- coding: ascii; tab-width: 4 -*-
Info2: <<
Package: openblas
Version: 0.3.6
Revision: 1
Type: gcc (8)
Maintainer: Derek Homeier <dhomeie@gwdg.de>

BuildDependsOnly: true
BuildDepends: fink (>= 0.30.0), gcc%type_raw[gcc]-compiler
Depends: %N-shlibs (= %v-%r)

Source: https://github.com/xianyi/OpenBLAS/archive/v%v.tar.gz
Source-MD5: 8a110a25b819a4b94e8a9580702b6495
SourceRename: OpenBLAS-%v.tar.gz
PatchFile: %n.patch
PatchFile-MD5: f60b9d7d957d04a772814eb61a4d6762

PatchScript: sed 's|@PREFIX@|%p|g' < %{PatchFile} | patch -p1

SetCC: gcc-fsf-%type_raw[gcc]

CompileScript: make FC=gfortran-fsf-%type_raw[gcc] COMMON_OPT='-O2 -mtune=intel' USE_THREAD=1 libs netlib re_lapack shared

InstallScript: <<
	make FC=gfortran-fsf-%type_raw[gcc] COMMON_OPT='-O2 -mtune=intel' USE_THREAD=1 PREFIX=%i install
	install_name_tool -id %p/lib/libopenblas.0.dylib %i/lib/libopenblas.0.dylib
	mv %i/include/cblas.h %i/include/cblas_openblas.h
	perl -pi -e 's|%i|%p|;' %i/lib/pkgconfig/openblas.pc %i/lib/cmake/openblas/OpenBLASConfig.cmake
<<

InfoTest: <<
	TestScript: <<
		#!/bin/sh -ev
		make FC=gfortran-fsf-%type_raw[gcc] COMMON_OPT='-O2 -mtune=intel' USE_THREAD=1 tests | tee tests.log
		grep -i fail tests.log
		grep -c PASSED tests.log
		cd benchmark
		make FC=gfortran-fsf-%type_raw[gcc] COMMON_OPT='-O2 -mtune=intel' USE_THREAD=1 veclib goto # atlas
		# this creates a ton of *.veclib, *.goto, *.atlas executables to be compared in performance...
	<<
<<

Splitoff: <<
	Package: %N-shlibs
	Depends: gcc%type_raw[gcc]-shlibs
	DocFiles: LICENSE USAGE.md
	Files: lib/libopenblas.0.dylib
	Shlibs: %p/lib/libopenblas.0.dylib 0.0.0 %v (>= 0.3.5-1)
<<

DocFiles: LICENSE README.md USAGE.md Changelog.txt CONTRIBUTORS.md BACKERS.md GotoBLAS_0*.txt benchmark/scripts
License: BSD
Homepage: https://www.openblas.net

Description: Optimized BLAS library based on GotoBLAS2
DescDetail: <<
BLAS stands for Basic Linear Algebra Subprograms. BLAS provides standard
interfaces for linear algebra, including BLAS1 (vector-vector operations),
BLAS2 (matrix-vector operations), and BLAS3 (matrix-matrix operations).
In general, BLAS is the computational kernel ("the bottom of the food chain")
in linear algebra or scientific applications. Thus, if BLAS implementation is
highly optimized, the whole application can get substantial benefit.

As BLAS is a standardized interface, you can refer to the documentation of its
reference implementation at netlib.org. Calls from C go through its CBLAS
interface, so your code will need to include the provided cblas.h in addition
to linking with -lopenblas.
A single-precision matrix multiplication will look like

#include <cblas.h>
...
cblas_sgemm(CblasRowMajor, CblasNoTrans,
            CblasNoTrans, M, N, K, 1.0, A, K, B, N, 0.0, result, N);

where M,N,K are the dimensions of your data.

OpenBLAS is an open source BLAS library forked from GotoBLAS2-1.13 BSD version.
Since Mr. Kazushige Goto left TACC, GotoBLAS is no longer being maintained.
Thus this project was created to continue developing OpenBLAS/GotoBLAS.
<<
DescPackaging: <<
Setup with architecture-independent version and some patches from MacPorts
https://github.com/macports/macports-ports/blob/master/math/OpenBLAS/Portfile
Build with FSF gcc8 to ensure optimum compatibility with gfortran.
cblas.h conflicts with header from atlas.
TestScript also builds executables in benchmark/, but currently does not run
them (producing ~200 lines of timing output each); benchmark scripts are
added to docs.
Optimisation flags chosen to create binary packages that should work on
anything from Pentium with SSE upwards, with tuning up to Haswell & Silvermont
CPUs with AVX2 (most recent supported by gcc8).
<<
# Info2
<<
