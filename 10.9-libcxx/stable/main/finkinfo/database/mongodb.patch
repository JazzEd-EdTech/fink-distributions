diff -ruN mongodb-src-r3.4.11-orig/SConstruct mongodb-src-r3.4.11/SConstruct
--- mongodb-src-r3.4.11-orig/SConstruct	2018-01-22 13:21:09.000000000 -0600
+++ mongodb-src-r3.4.11/SConstruct	2018-06-17 09:31:33.000000000 -0500
@@ -1562,6 +1562,8 @@
                          "-Wall",
                          "-Wsign-compare",
                          "-Wno-unknown-pragmas",
+                         "-Wno-unused-private-field",
+                         "-Wno-unused-local-typedef",
                          "-Winvalid-pch"] )
     # env.Append( " -Wconversion" ) TODO: this doesn't really work yet
     if env.TargetOSIs('linux', 'osx', 'solaris'):
diff -ruN mongodb-src-r3.4.11-orig/debian/mongod.conf mongodb-src-r3.4.11/debian/mongod.conf
--- mongodb-src-r3.4.11-orig/debian/mongod.conf	2018-01-22 13:21:09.000000000 -0600
+++ mongodb-src-r3.4.11/debian/mongod.conf	2018-06-17 09:31:23.000000000 -0500
@@ -5,7 +5,7 @@
 
 # Where and how to store data.
 storage:
-  dbPath: /var/lib/mongodb
+  dbPath: @FINK_PREFIX@/var/db/mongodb
   journal:
     enabled: true
 #  engine:
@@ -16,7 +16,7 @@
 systemLog:
   destination: file
   logAppend: true
-  path: /var/log/mongodb/mongod.log
+  path: @FINK_PREFIX@/var/log/mongodb/mongod.log
 
 # network interfaces
 net:
diff -ruN mongodb-src-r3.4.11-orig/src/mongo/shell/linenoise_utf8.h mongodb-src-r3.4.11/src/mongo/shell/linenoise_utf8.h
--- mongodb-src-r3.4.11-orig/src/mongo/shell/linenoise_utf8.h	2018-01-22 13:21:09.000000000 -0600
+++ mongodb-src-r3.4.11/src/mongo/shell/linenoise_utf8.h	2018-06-17 09:31:33.000000000 -0500
@@ -30,6 +30,7 @@
 #include <algorithm>
 #include <memory>
 #include <string.h>
+#include <algorithm>
 
 namespace linenoise_utf8 {
 
From b35c594738261edce2134b0bc7fb3e7a06e85fc3 Mon Sep 17 00:00:00 2001
From: Mathias Stearn <mathias@10gen.com>
Date: Tue, 25 Jul 2017 09:05:13 -0400
Subject: [PATCH] SERVER-29887 address clang-4.0 warnings in geo code

---
 SConstruct                             | 6 ++++++
 src/mongo/db/exec/geo_near.cpp         | 2 +-
 src/mongo/db/geo/r2_region_coverer.cpp | 6 ++----
 3 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/SConstruct b/SConstruct
index c56ce5edf87..d16a8fbd61f 100644
--- a/SConstruct
+++ b/SConstruct
@@ -1993,6 +1993,12 @@ def doConfigure(myenv):
         # is a problem at least for the S2 headers.
         AddToCXXFLAGSIfSupported(myenv, "-Wno-undefined-var-template")
 
+        # This warning was added in clang-4.0, but it warns about code that is required on some
+        # platforms. Since the warning just states that 'explicit instantiation of [a template] that
+        # occurs after an explicit specialization has no effect', it is harmless on platforms where
+        # it isn't required
+        AddToCXXFLAGSIfSupported(myenv, "-Wno-instantiation-after-specialization")
+
         # Check if we can set "-Wnon-virtual-dtor" when "-Werror" is set. The only time we can't set it is on
         # clang 3.4, where a class with virtual function(s) and a non-virtual destructor throws a warning when
         # it shouldn't.
diff --git a/src/mongo/db/exec/geo_near.cpp b/src/mongo/db/exec/geo_near.cpp
index 9bb94def100..49ee2feb6f9 100644
--- a/src/mongo/db/exec/geo_near.cpp
+++ b/src/mongo/db/exec/geo_near.cpp
@@ -288,7 +288,7 @@ class GeoNear2DStage::DensityEstimator {
         // Since appendVertexNeighbors(level, output) requires level < hash.getBits(),
         // we have to start to find documents at most GeoHash::kMaxBits - 1. Thus the finest
         // search area is 16 * finest cell area at GeoHash::kMaxBits.
-        _currentLevel = std::max(0u, hashParams.bits - 1u);
+        _currentLevel = std::max(0, hashParams.bits - 1);
     }
 
     PlanStage::StageState work(OperationContext* opCtx,
diff --git a/src/mongo/db/geo/r2_region_coverer.cpp b/src/mongo/db/geo/r2_region_coverer.cpp
index 47ba2528328..4d7791dc1e3 100644
--- a/src/mongo/db/geo/r2_region_coverer.cpp
+++ b/src/mongo/db/geo/r2_region_coverer.cpp
@@ -68,15 +68,13 @@ R2RegionCoverer::R2RegionCoverer(GeoHashConverter* hashConverter)
 R2RegionCoverer::~R2RegionCoverer() {}
 
 void R2RegionCoverer::setMinLevel(unsigned int minLevel) {
-    dassert(minLevel >= 0);
     dassert(minLevel <= GeoHash::kMaxBits);
-    _minLevel = max(0u, min(GeoHash::kMaxBits, minLevel));
+    _minLevel = min(GeoHash::kMaxBits, minLevel);
 }
 
 void R2RegionCoverer::setMaxLevel(unsigned int maxLevel) {
-    dassert(maxLevel >= 0);
     dassert(maxLevel <= GeoHash::kMaxBits);
-    _maxLevel = max(0u, min(GeoHash::kMaxBits, maxLevel));
+    _maxLevel = min(GeoHash::kMaxBits, maxLevel);
 }
 
 void R2RegionCoverer::setMaxCells(int maxCells) {
From 107858d4d2ffd9f0690def5108898a8b4be70350 Mon Sep 17 00:00:00 2001
From: Mathias Stearn <mathias@10gen.com>
Date: Thu, 5 Oct 2017 12:07:36 -0400
Subject: [PATCH] SERVER-31410 Suppress problematic clang-5 warnings

---
 SConstruct | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/SConstruct b/SConstruct
index 47fb231b59b..deed445c54d 100644
--- a/SConstruct
+++ b/SConstruct
@@ -1999,6 +1999,18 @@ def doConfigure(myenv):
         # it isn't required
         AddToCXXFLAGSIfSupported(myenv, "-Wno-instantiation-after-specialization")
 
+        # This warning was added in clang-5 and flags many of our lambdas. Since it isn't actively
+        # harmful to capture unused variables we are suppressing for now with a plan to fix later.
+        # Additionally, this has some false-positives where removing the capture makes the code
+        # incorrect and fail to compile on other compilers.
+        # See https://bugs.llvm.org/show_bug.cgi?id=34865.
+        AddToCCFLAGSIfSupported(myenv, "-Wno-unused-lambda-capture")
+
+        # This warning was added in clang-5 and incorrectly flags our implementation of
+        # exceptionToStatus(). See https://bugs.llvm.org/show_bug.cgi?id=34804
+        AddToCCFLAGSIfSupported(myenv, "-Wno-exceptions")
+
+
         # Check if we can set "-Wnon-virtual-dtor" when "-Werror" is set. The only time we can't set it is on
         # clang 3.4, where a class with virtual function(s) and a non-virtual destructor throws a warning when
         # it shouldn't.
From cd3e3011158cab7dbf5d2fed86641c8f0b8b88fb Mon Sep 17 00:00:00 2001
From: Sara Golemon <sara.golemon@mongodb.com>
Date: Fri, 6 Oct 2017 12:58:06 -0400
Subject: [PATCH] SERVER-31498 Make build more clang5 friendly
**** MODIFIED BY HN FOR FINK BUILD ****
diff --git a/src/mongo/executor/network_interface_asio.cpp b/src/mongo/executor/network_interface_asio.cpp
index f2d5fa97c3b..583f96f5ffa 100644
--- a/src/mongo/executor/network_interface_asio.cpp
+++ b/src/mongo/executor/network_interface_asio.cpp
@@ -394,28 +394,27 @@ Status NetworkInterfaceASIO::startCommand(const TaskExecutor::CallbackHandle& cb
                     generation = access->id;
                 }
 
-                op->_timeoutAlarm->asyncWait(
-                    [this, op, access, generation, requestId, adjustedTimeout](std::error_code ec) {
-                        // We must pass a check for safe access before using op inside the
-                        // callback or we may attempt access on an invalid pointer.
-                        stdx::lock_guard<stdx::mutex> lk(access->mutex);
-                        if (generation != access->id) {
-                            // The operation has been cleaned up, do not access.
-                            return;
-                        }
-
-                        if (!ec) {
-                            LOG(2) << "Request " << requestId << " timed out"
-                                   << ", adjusted timeout after getting connection from pool was "
-                                   << adjustedTimeout << ", op was " << redact(op->toString());
-
-                            op->timeOut_inlock();
-                        } else {
-                            LOG(2) << "Failed to time request " << requestId
-                                   << "out: " << ec.message() << ", op was "
-                                   << redact(op->toString());
-                        }
-                    });
+                op->_timeoutAlarm->asyncWait([op, access, generation, requestId, adjustedTimeout](
+                    std::error_code ec) {
+                    // We must pass a check for safe access before using op inside the
+                    // callback or we may attempt access on an invalid pointer.
+                    stdx::lock_guard<stdx::mutex> lk(access->mutex);
+                    if (generation != access->id) {
+                        // The operation has been cleaned up, do not access.
+                        return;
+                    }
+
+                    if (!ec) {
+                        LOG(2) << "Request " << requestId << " timed out"
+                               << ", adjusted timeout after getting connection from pool was "
+                               << adjustedTimeout << ", op was " << redact(op->toString());
+
+                        op->timeOut_inlock();
+                    } else {
+                        LOG(2) << "Failed to time request " << requestId << "out: " << ec.message()
+                               << ", op was " << redact(op->toString());
+                    }
+                });
             }
 
             _beginCommunication(op);
Fix: no member named 'next' in namespace 'boost'
https://svnweb.freebsd.org/ports?view=revision&revision=467678
--- a/src/third_party/yaml-cpp-0.5.3/include/yaml-cpp/node/detail/iterator.h	2017-09-07 19:28:48 UTC
+++ b/src/third_party/yaml-cpp-0.5.3/include/yaml-cpp/node/detail/iterator.h
@@ -11,7 +11,13 @@
 #include "yaml-cpp/node/ptr.h"
 #include "yaml-cpp/node/detail/node_iterator.h"
 #include <boost/iterator/iterator_adaptor.hpp>
+
+#include <boost/version.hpp>
+#if BOOST_VERSION < 106700
 #include <boost/utility.hpp>
+#else
+#include <boost/next_prior.hpp>
+#endif
 
 namespace YAML {
 namespace detail {
https://jira.mongodb.org/browse/SERVER-32516
https://github.com/mongodb/mongo/commit/3c34eda8d8a3

--- a/src/mongo/db/repl/oplog_fetcher.cpp.orig	2017-09-07 19:28:48 UTC
+++ b/src/mongo/db/repl/oplog_fetcher.cpp
@@ -265,7 +265,7 @@ StatusWith<boost::optional<rpc::OplogQueryMetadata>> p
         if (!metadataResult.isOK()) {
             return metadataResult.getStatus();
         }
-        oqMetadata = boost::make_optional<rpc::OplogQueryMetadata>(metadataResult.getValue());
+        oqMetadata = boost::make_optional(metadataResult.getValue());
     }
     return oqMetadata;
 }
From b3c9e24d7434c929c097d85f65a3586687031116 Mon Sep 17 00:00:00 2001
From: Mathias Stearn <mathias@10gen.com>
Date: Mon, 26 Mar 2018 11:27:58 -0400
Subject: [PATCH] SERVER-33508 Fix compile with boost-1.66

---
 src/mongo/executor/network_interface_mock_test.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/mongo/executor/network_interface_mock_test.cpp b/src/mongo/executor/network_interface_mock_test.cpp
index b1a2e4edff2..59c33e1fc82 100644
--- a/src/mongo/executor/network_interface_mock_test.cpp
+++ b/src/mongo/executor/network_interface_mock_test.cpp
@@ -143,7 +143,7 @@ TEST_F(NetworkInterfaceMockTest, ConnectionHook) {
         [&](const HostAndPort& remoteHost) {
             makeRequestCalled = true;
             hostCorrectForRequest = (remoteHost == testHost());
-            return boost::make_optional<RemoteCommandRequest>(expectedRequest);
+            return boost::make_optional(expectedRequest);
         },
         [&](const HostAndPort& remoteHost, RemoteCommandResponse&& response) {
             handleReplyCalled = true;
